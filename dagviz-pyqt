#!/usr/bin/python3

import sys, os, random

#from PyQt5.QtGui import QIcon, QFont
#from PyQt5.QtWidgets import QApplication, QWidget, QToolTip, QPushButton
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

import sip
sysroot = os.path.dirname(os.path.realpath(sys.argv[0]))
sys.path.append(sysroot + "/sip")
import dagrenderer

GO = {
    "zoom_rate_per_time" : 0.08,   # rate per scrolling time
    "zoom_rate_per_pixel" : 0.004, # rate per scrolling pixel: 0.08 / 20
    "zoom_default_weight" : 20,    # rate in pixel unit on one default zoom
    "margin_top"    : 20,
    "margin_bottom" : 20,
    "margin_left"   : 20,
    "margin_right"  : 20,
    "moving_distance" : 25.0,      # pixels, moving distance when pressing arrow keys
    "moving_distance_rate" : 20.0, # times, multiplied rate with modifier keys (Ctrl > Alt)
}
renderers = []

class DAGViewport(QWidget):
    def __init__(self):
        super(DAGViewport, self).__init__()
        # background color
        pal = self.palette()
        pal.setColor(QPalette.Window, Qt.white)
        self.setPalette(pal)
        self.setAutoFillBackground(True)
        self.base_x = GO["margin_left"]
        self.base_y = GO["margin_top"]
        self.x = 0.0
        self.y = 0.0
        self.pan_on = False
        self.x_mouse_pressed = 0
        self.y_mouse_pressed = 0
        self.setMouseTracking(True)
        self.R = None
        #for arg in sys.argv[1:]:
        if (sys.argv[1]):
            arg = sys.argv[1]
            R = dagrenderer.DAGRenderer()
            R.setDAG(arg)
            R.setViewport(sip.unwrapinstance(self))
            renderers.append(R)
            self.R = R
        self.zoom_ratio_x = 1.0
        self.zoom_ratio_y = 1.0
        self.width
        self.R.do_expanding_one()
        self.R.do_expanding_one()

    def resizeEvent(self, e):
        old_w = e.oldSize().width()
        margin = GO["margin_left"] + GO["margin_right"]
        if old_w >= 0:
            self.base_x -= (old_w - margin) / 2.0
        self.base_x += (self.width() - margin) / 2.0

    def paintEvent(self, e):
        qp = QPainter(self)
        qp.translate(self.base_x, self.base_y)
        qp.translate(self.x, self.y)
        qp.scale(self.zoom_ratio_x, self.zoom_ratio_y)
        self.R.draw(sip.unwrapinstance(qp))

    def move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy
        self.update()

    def zoom(self, x, y, weight):
        if weight != 0:
            new_zx = self.zoom_ratio_x
            new_zy = self.zoom_ratio_y
            factor = 1 + GO["zoom_rate_per_pixel"] * abs(weight)
            if weight > 0:
                new_zx *= factor
                new_zy *= factor
            elif weight < 0:
                new_zx /= factor
                new_zy /= factor
            rx = x - self.x - self.base_x
            ry = y - self.y - self.base_y
            dx = rx / self.zoom_ratio_x * new_zx - rx
            dy = ry / self.zoom_ratio_y * new_zy - ry
            self.x -= dx
            self.y -= dy
            self.zoom_ratio_x = new_zx
            self.zoom_ratio_y = new_zy
            self.update()
        
    def wheelEvent(self, e):
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            # moving
            self.move(e.pixelDelta().x(), e.pixelDelta().y())
        else:
            # zooming
            weight = e.pixelDelta().y()
            self.zoom(e.x(), e.y(), weight)
        self.repaint()

    def mousePressEvent(self, e):
        self.x_mouse_pressed = e.x()
        self.y_mouse_pressed = e.y()
        self.pan_on = True
    def mouseMoveEvent(self, e):
        if self.pan_on:
            self.x += e.x() - self.x_mouse_pressed
            self.y += e.y() - self.y_mouse_pressed
            self.x_mouse_pressed = e.x()
            self.y_mouse_pressed = e.y()
            self.repaint()
    def mouseReleaseEvent(self, e):
        self.pan_on = False

    def move_up(self):
        dx = 0.0
        dy = GO["moving_distance"]
        rate = 1.0
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            rate *= GO["moving_distance_rate"]
        elif mod == Qt.AltModifier:
            rate /= GO["moving_distance"] # 1 pixel
        self.move(dx*rate, dy*rate)
    def move_down(self):
        dx = 0.0
        dy = - GO["moving_distance"]
        rate = 1.0
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            rate *= GO["moving_distance_rate"]
        elif mod == Qt.AltModifier:
            rate /= GO["moving_distance"] # 1 pixel
        self.move(dx*rate, dy*rate)
    def move_left(self):
        dx = GO["moving_distance"]
        dy = 0.0
        rate = 1.0
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            rate *= GO["moving_distance_rate"]
        elif mod == Qt.AltModifier:
            rate /= GO["moving_distance"] # 1 pixel
        self.move(dx*rate, dy*rate)
    def move_right(self):
        dx = - GO["moving_distance"]
        dy = 0.0
        rate = 1.0
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            rate *= GO["moving_distance_rate"]
        elif mod == Qt.AltModifier:
            rate /= GO["moving_distance"] # 1 pixel
        self.move(dx*rate, dy*rate)
        
    def do_zoom_in(self):
        self.zoom(self.width() / 2, self.height() / 2, GO["zoom_default_weight"])
        
    def do_zoom_out(self):
        self.zoom(self.width() / 2, self.height() / 2, - GO["zoom_default_weight"])

    def get_zoom_fit_hor_attributes(self):
        x = 0.0
        y = 0.0
        z = 1.0
        w1 = self.R.width()
        w2 = self.width() - GO["margin_left"] - GO["margin_right"]
        if w1 > w2:
            z = w2 / w1
        x -= z * (self.R.right_width() - self.R.left_width()) / 2
        return x,y,z
    def do_zoom_fit_hor(self):
        x,y,z = self.get_zoom_fit_hor_attributes()
        self.x = x
        self.y = y
        self.zoom_ratio_x = z
        self.zoom_ratio_y = z
        self.update()
            
    def get_zoom_fit_ver_attributes(self):
        x = 0.0
        y = 0.0
        z = 1.0
        h1 = self.R.height()
        h2 = self.height() - GO["margin_top"] - GO["margin_bottom"]
        if h1 > h2:
            z = h2 / h1
        x -= z * (self.R.right_width() - self.R.left_width()) / 2
        return x,y,z
    def do_zoom_fit_ver(self):
        x,y,z = self.get_zoom_fit_ver_attributes()
        self.x = x
        self.y = y
        self.zoom_ratio_x = z
        self.zoom_ratio_y = z
        self.update()
        
    def do_zoom_fit_full(self):
        x1,y1,z1 = self.get_zoom_fit_hor_attributes()
        x2,y2,z2 = self.get_zoom_fit_ver_attributes()
        if z1 < z2:
            self.x = x1
            self.y = y1
            self.zoom_ratio_x = z1
            self.zoom_ratio_y = z1
        else:
            self.x = x2
            self.y = y2
            self.zoom_ratio_x = z2
            self.zoom_ratio_y = z2
        self.update()
        
            
class DAGViz(QMainWindow):
    def __init__(self):
        super(DAGViz, self).__init__()
        self.VP = DAGViewport()
        self.initUI()
        
    def do_expanding_one(self):
        self.VP.R.do_expanding_one()
        self.VP.R.layout()
        self.VP.update()
    
    def do_collapsing_one(self, e):
        self.VP.R.do_collapsing_one()
        self.VP.R.layout()
        self.VP.update()

    def initUI(self):
        # main window
        self.setGeometry(0, 0, 1000, 600)
        self.center()
        self.setWindowTitle('DAGViz')
        self.setWindowIcon(QIcon(sysroot + '/gui/dagviz_icon.svg'))

        # status bar
        self.statusBar().showMessage('Ready')

        # menu bar
        menubar = self.menuBar()
        #menubar.setNativeMenuBar(False)
        fileMenu = menubar.addMenu('&File')
        editMenu = menubar.addMenu('&Edit')
        viewMenu = menubar.addMenu('&View')

        # file
        exitAct = QAction(QIcon(sysroot + '/gui/exit.svg'), '&Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(qApp.quit)
        fileMenu.addAction(exitAct)

        # edit
        expandAct = QAction(QIcon(sysroot + '/gui/plus_button_icon.svg'), 'E&xpand DAG one depth', self)
        expandAct.setShortcut('X')
        expandAct.setStatusTip('Expand DAG one depth (X)')
        expandAct.triggered.connect(self.do_expanding_one)
        editMenu.addAction(expandAct)
        collapseAct = QAction(QIcon(sysroot + '/gui/minus_button_icon.svg'), '&Collapse DAG one depth', self)
        collapseAct.setShortcut('C')
        collapseAct.setStatusTip('Collapse DAG one depth (C)')
        collapseAct.triggered.connect(self.do_collapsing_one)
        editMenu.addAction(collapseAct)

        # view
        toolboxAct = QAction('&Toolbox', self)
        toolboxAct.setShortcut('Ctrl+T')
        toolboxAct.setStatusTip('Show toolbox')
        #toolboxAct.triggered.connect(qApp.quit)
        viewMenu.addAction(toolboxAct)
        
        showhideMenu = viewMenu.addMenu('Sh&ow/Hide')
        replayAct = QAction('&Replay', self, checkable=True)
        replayAct.setShortcut('Shift+Ctrl+R')
        replayAct.setChecked(False)
        #replayAct.triggered.connect(qApp.quit)
        nodeinfoAct = QAction('&Node information', self, checkable=True)
        nodeinfoAct.setShortcut('Shift+Ctrl+N')
        nodeinfoAct.setChecked(False)
        #nodeinfoAct.triggered.connect(qApp.quit)
        showhideMenu.addAction(replayAct)
        showhideMenu.addAction(nodeinfoAct)

        zoomMenu = viewMenu.addMenu('&Zoom')
        zoomInAct = zoomMenu.addAction('Zoom In')
        zoomInAct.setShortcut('+')
        zoomInAct.triggered.connect(self.VP.do_zoom_in)
        zoomOutAct = zoomMenu.addAction('Zoom Out')
        zoomOutAct.setShortcut('-')
        zoomOutAct.triggered.connect(self.VP.do_zoom_out)
        zoomMenu.addSeparator()
        zoomFullAct = zoomMenu.addAction('Fit &Full')
        zoomFullAct.setShortcut('F')
        zoomFullAct.setIcon(QIcon(sysroot + '/gui/fit_button_icon.svg'))
        zoomFullAct.triggered.connect(self.VP.do_zoom_fit_full)
        zoomHorAct = zoomMenu.addAction('Fit &Horizontally')
        zoomHorAct.setShortcut('H')
        zoomHorAct.triggered.connect(self.VP.do_zoom_fit_hor)
        zoomVerAct = zoomMenu.addAction('Fit &Vertically')
        zoomVerAct.setShortcut('V')
        zoomVerAct.triggered.connect(self.VP.do_zoom_fit_ver)

        # toolbar
        self.toolbar = self.addToolBar('Toolbar')
        self.toolbar.addAction(zoomFullAct)
        self.toolbar.addAction(expandAct)
        self.toolbar.addAction(collapseAct)
        self.toolbar.addSeparator()

        # hidden actions
        # moveUpAct = QAction(self)
        # moveUpAct.setShortcut(Qt.Key_Up)
        # moveUpAct.triggered.connect(self.VP.move_up)
        # self.addAction(moveUpAct)
        # moveDownAct = QAction(self)
        # moveDownAct.setShortcut(Qt.Key_Down)
        # moveDownAct.triggered.connect(self.VP.move_down)
        # self.addAction(moveDownAct)
        # moveLeftAct = QAction(self)
        # moveLeftAct.setShortcut(Qt.Key_Left)
        # moveLeftAct.triggered.connect(self.VP.move_left)
        # self.addAction(moveLeftAct)
        # moveRightAct = QAction(self)
        # moveRightAct.setShortcut(Qt.Key_Right)
        # moveRightAct.triggered.connect(self.VP.move_right)
        # self.addAction(moveRightAct)
        
        # central widget
        self.setCentralWidget(self.VP)
        
        # show
        self.show()

    def contextMenuEvent(self, event):
           cmenu = QMenu(self)
           openAct = cmenu.addAction("Open")
           quitAct = cmenu.addAction("Quit")
           action = cmenu.exec_(self.mapToGlobal(event.pos()))
           if action == quitAct:
               qApp.quit()

    def keyPressEvent(self, e):
        if e.key() == Qt.Key_Up:
            self.VP.move_up()
        if e.key() == Qt.Key_Down:
            self.VP.move_down()
        if e.key() == Qt.Key_Left:
            self.VP.move_left()
        elif e.key() == Qt.Key_Right:
            self.VP.move_right()
               
    # def closeEvent(self, event):
    #     print("closeEvent handler.")
    #     reply = QMessageBox.question(self, 'Message', "Are you sure to quit?",
    #                                  QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
    #     if reply == QMessageBox.Yes:
    #         event.accept()
    #     else:
    #         event.ignore()

    def center(self):
        windowrec = self.frameGeometry()
        centerpt = QDesktopWidget().availableGeometry().center()
        windowrec.moveCenter(centerpt)
        self.move(windowrec.topLeft())

        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = DAGViz()
    sys.exit(app.exec_())
