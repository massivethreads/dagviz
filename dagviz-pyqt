#!/usr/bin/python3

import sys, os, random

#from PyQt5.QtGui import QIcon, QFont
#from PyQt5.QtWidgets import QApplication, QWidget, QToolTip, QPushButton
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

import sip
sysroot = os.path.dirname(os.path.realpath(sys.argv[0]))
sys.path.append(sysroot + "/sip")
import dagrenderer

GO = {
    "zoom_step_ratio" : 0.08, # rate per scrolling time
    "zoom_step_ratio_weight" : 0.004, # rate per scrolling pixel
}
renderers = []

class DAGViewport(QWidget):
    def __init__(self):
        super(DAGViewport, self).__init__()
        self.x = 0.0
        self.y = 10.0
        self.pan_on = False
        self.x_mouse_pressed = 0
        self.y_mouse_pressed = 0
        self.setMouseTracking(True)
        self.R = None
        #for arg in sys.argv[1:]:
        if (sys.argv[1]):
            arg = sys.argv[1]
            R = dagrenderer.DAGRenderer()
            R.setDAG(arg)
            R.setViewport(sip.unwrapinstance(self))
            renderers.append(R)
            self.R = R
        self.zoom_ratio_x = 1.0
        self.zoom_ratio_y = 1.0

    def resizeEvent(self, e):
        self.x -= e.oldSize().width() / 2
        self.x += e.size().width() / 2

    def paintEvent(self, e):
        qp = QPainter(self)
        #qp.translate(qp.device().width() / 2, 10)
        qp.translate(self.x, self.y)
        qp.scale(self.zoom_ratio_x, self.zoom_ratio_y)
        self.R.draw(sip.unwrapinstance(qp))
        
    def wheelEvent(self, e):
        mod = QApplication.keyboardModifiers()
        if mod == Qt.ControlModifier:
            # moving
            self.x = self.x + e.pixelDelta().x()
            self.y = self.y + e.pixelDelta().y()
        else:
            # zooming
            d = e.pixelDelta().y()
            if d != 0:
                new_zoom_ratio_x = self.zoom_ratio_x
                new_zoom_ratio_y = self.zoom_ratio_y
                factor = 1 + GO["zoom_step_ratio_weight"] * abs(d)
                if d > 0:
                    new_zoom_ratio_x *= factor
                    new_zoom_ratio_y *= factor
                elif d < 0:
                    new_zoom_ratio_x /= factor
                    new_zoom_ratio_y /= factor
                rx = e.x() - self.x
                ry = e.y() - self.y
                dx = rx / self.zoom_ratio_x * new_zoom_ratio_x - rx
                dy = ry / self.zoom_ratio_y * new_zoom_ratio_y - ry
                self.x -= dx
                self.y -= dy
                self.zoom_ratio_x = new_zoom_ratio_x
                self.zoom_ratio_y = new_zoom_ratio_y
        self.repaint()

    def mousePressEvent(self, e):
        self.x_mouse_pressed = e.x()
        self.y_mouse_pressed = e.y()
        self.pan_on = True
    def mouseMoveEvent(self, e):
        if self.pan_on:
            self.x += e.x() - self.x_mouse_pressed
            self.y += e.y() - self.y_mouse_pressed
            self.x_mouse_pressed = e.x()
            self.y_mouse_pressed = e.y()
            self.repaint()
    def mouseReleaseEvent(self, e):
        self.pan_on = False

            
class DAGViz(QMainWindow):
    def __init__(self):
        super(DAGViz, self).__init__()
        self.VP = DAGViewport()
        self.initUI()
        
    def do_expanding_one(self):
        self.VP.R.do_expanding_one()
        self.VP.R.layout()
        self.VP.update()
    
    def do_collapsing_one(self, e):
        self.VP.R.do_collapsing_one()
        self.VP.R.layout()
        self.VP.update()

    def initUI(self):
        # main window
        self.setGeometry(0, 0, 1000, 600)
        self.center()
        self.setWindowTitle('DAGViz')
        self.setWindowIcon(QIcon(sysroot + '/gui/dagviz_icon.svg'))

        # status bar
        self.statusBar().showMessage('Ready')

        # menu bar
        menubar = self.menuBar()
        #menubar.setNativeMenuBar(False)
        fileMenu = menubar.addMenu('&File')
        editMenu = menubar.addMenu('&Edit')
        viewMenu = menubar.addMenu('&View')

        # file
        exitAct = QAction(QIcon(sysroot + '/gui/exit.svg'), '&Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit application')
        exitAct.triggered.connect(qApp.quit)
        fileMenu.addAction(exitAct)

        # edit
        expandAct = QAction(QIcon(sysroot + '/gui/plus_button_icon.svg'), 'E&xpand DAG one depth', self)
        expandAct.setShortcut('X')
        expandAct.setStatusTip('Expand DAG one depth (X)')
        expandAct.triggered.connect(self.do_expanding_one)
        editMenu.addAction(expandAct)
        collapseAct = QAction(QIcon(sysroot + '/gui/minus_button_icon.svg'), '&Collapse DAG one depth', self)
        collapseAct.setShortcut('C')
        collapseAct.setStatusTip('Collapse DAG one depth (C)')
        collapseAct.triggered.connect(self.do_collapsing_one)
        editMenu.addAction(collapseAct)

        # view
        toolboxAct = QAction('&Toolbox', self)
        toolboxAct.setShortcut('Ctrl+T')
        toolboxAct.setStatusTip('Show toolbox')
        #toolboxAct.triggered.connect(qApp.quit)
        viewMenu.addAction(toolboxAct)
        
        showhideMenu = viewMenu.addMenu('Sh&ow/Hide')
        replayAct = QAction('&Replay', self, checkable=True)
        replayAct.setShortcut('Shift+Ctrl+R')
        replayAct.setChecked(False)
        #replayAct.triggered.connect(qApp.quit)
        nodeinfoAct = QAction('&Node information', self, checkable=True)
        nodeinfoAct.setShortcut('Shift+Ctrl+N')
        nodeinfoAct.setChecked(False)
        #nodeinfoAct.triggered.connect(qApp.quit)
        showhideMenu.addAction(replayAct)
        showhideMenu.addAction(nodeinfoAct)

        zoomMenu = viewMenu.addMenu('&Zoom')
        zoomFullAct = zoomMenu.addAction('Zoom fit &full')
        zoomFullAct.setShortcut('F')
        #zoomFullAct.triggered.connect(qApp.quit)
        zoomHorAct = zoomMenu.addAction('Zoom fit &horizontally')
        zoomHorAct.setShortcut('H')
        #zoomHorAct.triggered.connect(qApp.quit)
        zoomVerAct = zoomMenu.addAction('Zoom fit &vertically')
        zoomVerAct.setShortcut('V')
        #zoomVerAct.triggered.connect(qApp.quit)

        # toolbar
        self.toolbar = self.addToolBar('Toolbar')
        #self.toolbar.addAction(exitAct)
        self.toolbar.addAction(expandAct)
        self.toolbar.addAction(collapseAct)
        self.toolbar.addSeparator()

        # central widget
        self.setCentralWidget(self.VP)
        
        # show
        self.show()

    def contextMenuEvent(self, event):
           cmenu = QMenu(self)
           openAct = cmenu.addAction("Open")
           quitAct = cmenu.addAction("Quit")
           action = cmenu.exec_(self.mapToGlobal(event.pos()))
           if action == quitAct:
               qApp.quit()
               
    # def closeEvent(self, event):
    #     print("closeEvent handler.")
    #     reply = QMessageBox.question(self, 'Message', "Are you sure to quit?",
    #                                  QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
    #     if reply == QMessageBox.Yes:
    #         event.accept()
    #     else:
    #         event.ignore()

    def center(self):
        windowrec = self.frameGeometry()
        centerpt = QDesktopWidget().availableGeometry().center()
        windowrec.moveCenter(centerpt)
        self.move(windowrec.topLeft())

        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = DAGViz()
    sys.exit(app.exec_())
